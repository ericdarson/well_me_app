create or replace NONEDITIONABLE PROCEDURE SP_AVERAGE_REKSADANA_NASABAH 
(
 P_ID_PLAN IN T_REKSADANA_NASABAH.ID_PLAN%TYPE,
 P_COLUMN_NAME IN VARCHAR2,
 P_ID_JENIS_REKSADANA IN NUMBER,
 P_AVERAGE OUT NUMBER
)
AS 
P_AVERAGE1 NUMBER;
P_AVERAGE2 NUMBER;
SQL_STATEMENT VARCHAR2(10000);
BEGIN
P_AVERAGE1:=0;
P_AVERAGE2:=0;

        SQL_STATEMENT:='SELECT CASE WHEN AVG(T_PRODUK_REKSADANA.'||P_COLUMN_NAME||') 
        IS NULL then 0 else AVG(T_PRODUK_REKSADANA.'||P_COLUMN_NAME||') END
        FROM T_REKSADANA_NASABAH INNER JOIN T_PRODUK_REKSADANA ON T_REKSADANA_NASABAH.ID_PRODUK=T_PRODUK_REKSADANA.ID_PRODUK 
        INNER JOIN M_JENIS_REKSADANA ON T_PRODUK_REKSADANA.ID_JENIS_REKSADANA=M_JENIS_REKSADANA.ID_JENIS_REKSADANA 
        WHERE T_REKSADANA_NASABAH.ID_PLAN='||P_ID_PLAN ||' AND T_PRODUK_REKSADANA.ID_JENIS_REKSADANA='||P_ID_JENIS_REKSADANA||' GROUP BY T_PRODUK_REKSADANA.ID_JENIS_REKSADANA';
        EXECUTE IMMEDIATE SQL_STATEMENT INTO P_AVERAGE1;

        SQL_STATEMENT:='SELECT CASE WHEN AVG(T_PRODUK_REKSADANA.'||P_COLUMN_NAME||') 
        IS NULL then 0 else AVG(T_PRODUK_REKSADANA.'||P_COLUMN_NAME||') END 
        FROM T_TRANSAKSI_BELI INNER JOIN T_PRODUK_REKSADANA ON T_TRANSAKSI_BELI.ID_PRODUK=T_PRODUK_REKSADANA.ID_PRODUK 
        INNER JOIN M_JENIS_REKSADANA ON T_PRODUK_REKSADANA.ID_JENIS_REKSADANA=M_JENIS_REKSADANA.ID_JENIS_REKSADANA 
        WHERE T_TRANSAKSI_BELI.ID_PLAN='||P_ID_PLAN ||' AND T_PRODUK_REKSADANA.ID_JENIS_REKSADANA='||P_ID_JENIS_REKSADANA||' GROUP BY T_PRODUK_REKSADANA.ID_JENIS_REKSADANA';
        EXECUTE IMMEDIATE SQL_STATEMENT INTO P_AVERAGE2;

    IF P_AVERAGE1=0 OR P_AVERAGE2=0 THEN
        P_AVERAGE:=(P_AVERAGE1+P_AVERAGE2)/1;
    ELSE
        P_AVERAGE:=(P_AVERAGE1+P_AVERAGE2)/2;
    END IF;
        RETURN;


EXCEPTION WHEN NO_DATA_FOUND THEN
IF P_AVERAGE1=0 OR P_AVERAGE2=0 THEN
P_AVERAGE:=(P_AVERAGE1+P_AVERAGE2)/1;
ELSE
P_AVERAGE:=(P_AVERAGE1+P_AVERAGE2)/2;
END IF;

  
END SP_AVERAGE_REKSADANA_NASABAH;

create or replace NONEDITIONABLE PROCEDURE SP_GET_CURRENT_AMOUNT_PLANNER 
(   P_ID_PLAN IN T_PLANNER.ID_PLAN%TYPE,
    P_BCA_ID IN T_PLANNER.BCA_ID%TYPE,
    P_STATUS OUT VARCHAR2,
    P_RESULT OUT VARCHAR2
    )
AS 
V_SUM NUMBER;
V_COUNTER NUMBER;
BEGIN
P_RESULT:=0;
  SELECT CASE when SUM(NAB_SEKARANG*JUMLAH_UNIT) IS NULL then 0 else SUM(NAB_SEKARANG*JUMLAH_UNIT)
  END AS SUM INTO V_SUM FROM T_REKSADANA_NASABAH WHERE ID_PLAN=P_ID_PLAN AND BCA_ID=P_BCA_ID; 
  P_RESULT:=P_RESULT+V_SUM;
  SELECT CASE when SUM(NAB*JUMLAH_UNIT) IS NULL then 0 else SUM(NAB*JUMLAH_UNIT)
  END AS SUM INTO V_SUM FROM T_TRANSAKSI_BELI WHERE ID_PLAN=P_ID_PLAN AND BCA_ID=P_BCA_ID AND STATUS_PEMBELIAN=0;
  P_RESULT:=P_RESULT+V_SUM;
  SELECT COUNT(*) INTO V_COUNTER FROM T_REKSADANA_NASABAH WHERE ID_PLAN=P_ID_PLAN AND BCA_ID=P_BCA_ID AND STATUS_DAILY_UPDATE=0; 
  
  IF V_COUNTER>0 THEN
  P_STATUS:=0;
  ELSE
  P_STATUS:=1;
  END IF;
  
  EXCEPTION WHEN NO_DATA_FOUND THEN
  P_RESULT:=0;

END SP_GET_CURRENT_AMOUNT_PLANNER;


create or replace NONEDITIONABLE PROCEDURE SP_GET_NEXT_TARGET_AMOUNT_PLANNER
(   P_ID_PLAN IN T_REKSADANA_NASABAH.ID_PLAN%TYPE,
    P_RESULT OUT VARCHAR2
    )
AS 
V_NEXT_TARGET_AMOUNT T_PLANNER.NEXT_TARGET_AMOUNT%TYPE;
V_BCA_ID T_PLANNER.BCA_ID%TYPE;
V_TEMP NUMBER;
V_BOBOT_RESIKO T_NASABAH.BOBOT_RESIKO%TYPE;
CURSOR C_BOBOT IS SELECT * FROM M_RESIKO WHERE BOBOT_RESIKO=V_BOBOT_RESIKO;
R_BOBOT C_BOBOT%ROWTYPE;
BEGIN
V_TEMP:=0;
V_NEXT_TARGET_AMOUNT:=0;
SELECT BCA_ID INTO V_BCA_ID FROM T_PLANNER WHERE ID_PLAN=P_ID_PLAN;
SELECT BOBOT_RESIKO INTO V_BOBOT_RESIKO FROM T_NASABAH WHERE BCA_ID=V_BCA_ID;
OPEN C_BOBOT;
LOOP
    FETCH  C_BOBOT INTO R_BOBOT;
    EXIT WHEN C_BOBOT%NOTFOUND;
    SP_NOMINAL_YANG_HARUS_DITABUNG (P_ID_PLAN,R_BOBOT.ID_JENIS_REKSADANA,V_TEMP);
    V_NEXT_TARGET_AMOUNT:=V_NEXT_TARGET_AMOUNT+V_TEMP;
    
END LOOP;
P_RESULT:=V_NEXT_TARGET_AMOUNT;
END SP_GET_NEXT_TARGET_AMOUNT_PLANNER;


create or replace NONEDITIONABLE PROCEDURE SP_INSERT_JENIS_REKSADANA
(
P_NAMA IN m_jenis_reksadana.nama_jenis%TYPE,
P_UPDATED_BY IN m_jenis_reksadana.LAST_UPDATE_BY%TYPE,
P_STATUS OUT VARCHAR2
)
AS 
BEGIN
  INSERT INTO M_JENIS_REKSADANA VALUES (NULL,P_NAMA,SYSDATE,SYSDATE,P_UPDATED_BY);
  P_STATUS:='1';
  RETURN;
  EXCEPTION WHEN OTHERS THEN
        P_STATUS:='SOMETHING WENT WRONG';
  RETURN;
END SP_INSERT_JENIS_REKSADANA;

create or replace NONEDITIONABLE PROCEDURE SP_INSERT_PLANNER 
(
    P_BCA_ID IN T_PLANNER.BCA_ID%TYPE,
    P_NAMA_PLAN IN T_PLANNER.NAMA_PLAN%TYPE,
    P_GOAL_AMOUNT IN T_PLANNER.GOAL_AMOUNT%TYPE,
    P_CURRENT_AMOUNT IN T_PLANNER.CURRENT_AMOUNT%TYPE,
    P_PERIODIC IN T_PLANNER.PERIODIC%TYPE,
    P_DUE_DATE IN T_PLANNER.DUE_DATE%TYPE,
    P_LAST_UPDATED_BY IN T_PLANNER.LAST_UPDATE_BY%TYPE,
    P_STATUS OUT VARCHAR2
)
AS 
BEGIN
  INSERT INTO T_PLANNER (BCA_ID,ID_PLAN,NAMA_PLAN,GOAL_AMOUNT,CURRENT_AMOUNT,FLAG_CHECKER,PERIODIC,DUE_DATE,PUZZLE_RANDOMIZE,CREATION_DATE,LAST_UPDATE_DATE,LAST_UPDATE_BY) 
  values (P_BCA_ID,2,P_NAMA_PLAN,P_GOAL_AMOUNT,P_CURRENT_AMOUNT,0,P_PERIODIC,P_DUE_DATE,'000000000',SYSDATE,SYSDATE,P_LAST_UPDATED_BY);
  COMMIT;
  EXCEPTION WHEN OTHERS THEN
        P_STATUS:='SOMETHING WENT WRONG';
  RETURN;
END SP_INSERT_PLANNER;

create or replace NONEDITIONABLE PROCEDURE SP_INSERT_REKSADANA_NASABAH
(
    P_BCA_ID IN T_REKSADANA_NASABAH.BCA_ID%TYPE,
    P_ID_PRODUK IN T_REKSADANA_NASABAH.ID_PRODUK%TYPE,
    P_ID_PLAN IN T_REKSADANA_NASABAH.ID_PLAN%TYPE,
    P_JUMLAH_UNIT IN T_REKSADANA_NASABAH.JUMLAH_UNIT%TYPE,
    P_NAB_RERATA IN T_REKSADANA_NASABAH.NAB_RERATA%TYPE,
    P_NAB_SEKARANG IN T_REKSADANA_NASABAH.NAB_SEKARANG%TYPE,
    P_LAST_UPDATED_BY IN T_REKSADANA_NASABAH.LAST_UPDATE_BY%TYPE,
    P_STATUS OUT VARCHAR2
)
AS 
BEGIN


  INSERT INTO T_REKSADANA_NASABAH VALUES (1,P_BCA_ID,P_ID_PRODUK,P_ID_PLAN,P_JUMLAH_UNIT,P_NAB_RERATA,P_NAB_SEKARANG,SYSDATE,SYSDATE,P_LAST_UPDATED_BY,0);
  P_STATUS:='1';
  RETURN;
  EXCEPTION WHEN OTHERS THEN
        P_STATUS:='SOMETHING WENT WRONG';
  RETURN;
END SP_INSERT_REKSADANA_NASABAH;

create or replace NONEDITIONABLE PROCEDURE SP_LOGIN(
	P_BCA_ID IN T_NASABAH.BCA_ID%TYPE,
	P_PASSWORD IN T_NASABAH.PASSWORD%TYPE,
	P_STATUS OUT VARCHAR2,
    P_MESSAGE OUT VARCHAR2
)
AS
LOGIN_STATUS VARCHAR2(2);
LOCKED_STATUS VARCHAR(20);
V_DATE_LOCKED TIMESTAMP;
BEGIN

 SELECT COUNT(*) INTO LOGIN_STATUS FROM T_NASABAH WHERE BCA_ID=P_BCA_ID AND PASSWORD=P_PASSWORD;
 SELECT WRONG_ATTEMPT INTO LOCKED_STATUS FROM T_NASABAH WHERE BCA_ID=P_BCA_ID;

 SELECT DATE_LOCKED INTO V_DATE_LOCKED FROM T_NASABAH WHERE BCA_ID=P_BCA_ID;
 IF V_DATE_LOCKED < CURRENT_TIMESTAMP OR V_DATE_LOCKED IS NULL THEN
    
 IF LOGIN_STATUS<>'1' THEN
    UPDATE T_NASABAH SET WRONG_ATTEMPT=WRONG_ATTEMPT+1 WHERE BCA_ID=P_BCA_ID;
    COMMIT;
    SELECT WRONG_ATTEMPT INTO LOCKED_STATUS FROM T_NASABAH WHERE BCA_ID=P_BCA_ID;
        IF LOCKED_STATUS>5 THEN
             UPDATE T_NASABAH SET DATE_LOCKED = CURRENT_TIMESTAMP + INTERVAL '30' MINUTE WHERE BCA_ID=P_BCA_ID;
             COMMIT;
             SELECT DATE_LOCKED INTO V_DATE_LOCKED FROM T_NASABAH WHERE BCA_ID=P_BCA_ID;
             P_STATUS:='0';
             P_MESSAGE:=CONCAT('AKUN ANDA DI LOCK SAMPAI ',V_DATE_LOCKED);
             RETURN;
        END IF;
        P_STATUS:='0';
        P_MESSAGE:='USERNAME ATAU PASSWORD SALAH';
        RETURN;
    ELSE
    UPDATE T_NASABAH SET TOKEN=STANDARD_HASH(CONCAT(to_char(current_timestamp,'YYYY-MM-DD HH24:MI:SS'),BCA_ID),'MD5'), DATE_LOCKED=NULL,WRONG_ATTEMPT=0,TOKEN_EXPIRED=CURRENT_TIMESTAMP + INTERVAL '30' DAY WHERE BCA_ID=P_BCA_ID;
    COMMIT;
    SELECT TOKEN INTO P_MESSAGE FROM T_NASABAH WHERE BCA_ID=P_BCA_ID;
    P_STATUS:='1';
    RETURN;
 END IF;
 
END IF;

IF V_DATE_LOCKED IS NOT NULL THEN
    P_STATUS:='0';
    P_MESSAGE:=CONCAT('AKUN ANDA DILCOK SAMPAI ',V_DATE_LOCKED);
    return;
END IF;


EXCEPTION WHEN NO_DATA_FOUND THEN
P_STATUS:='0';
P_MESSAGE:='USERNAME ATAU PASSWORD SALAH';
return;
END;

create or replace NONEDITIONABLE PROCEDURE SP_LOGOUT(
	P_BCA_ID IN T_NASABAH.BCA_ID%TYPE
    )
AS
BEGIN
 UPDATE T_NASABAH SET TOKEN=NULL, TOKEN_EXPIRED=NULL WHERE BCA_ID=P_BCA_ID;
END SP_LOGOUT;

create or replace NONEDITIONABLE PROCEDURE SP_NOMINAL_YANG_HARUS_DITABUNG (
    P_ID_PLAN IN T_REKSADANA_NASABAH.ID_PLAN%TYPE,
    P_ID_JENIS_REKSADANA IN NUMBER,
    P_RESULT OUT VARCHAR2
    )
AS  
DATEDIFF NUMBER;
PERIODIC VARCHAR2(100);
REPEAT_INVESTMENT INTEGER;
RETURN_ON_INVESTMENT NUMBER;
ONE_TIME_RETURN_ON_INVESTMENT NUMBER;
CURR_AMOUNT NUMBER;
GOAL_AMOUNT NUMBER;
V_BCA_ID T_PLANNER.BCA_ID%TYPE;
V_BOBOT_RESIKO T_NASABAH.BOBOT_RESIKO%TYPE;
V_PRESENTASE m_resiko.persentase%TYPE;
INVESTMENT_PREDICTION NUMBER;
BEGIN
REPEAT_INVESTMENT:=0;
SELECT DUE_DATE-SYSDATE, PERIODIC,CURRENT_AMOUNT,GOAL_AMOUNT INTO DATEDIFF, PERIODIC,CURR_AMOUNT,GOAL_AMOUNT FROM T_PLANNER WHERE ID_PLAN=P_ID_PLAN;

    IF PERIODIC = 'MONTHLY' THEN
    REPEAT_INVESTMENT:=CEIL(DATEDIFF/30);
    ELSIF PERIODIC ='WEEKLY' THEN
    REPEAT_INVESTMENT:=CEIL(DATEDIFF/7);
    ELSIF PERIODIC='YEARLY' THEN
    REPEAT_INVESTMENT:=CEIL(DATEDIFF/365);
    END IF;
    SELECT BCA_ID INTO V_BCA_ID FROM T_PLANNER WHERE ID_PLAN=P_ID_PLAN;
    SELECT BOBOT_RESIKO INTO V_BOBOT_RESIKO FROM T_NASABAH WHERE BCA_ID=V_BCA_ID;
    SELECT m_resiko.persentase INTO V_PRESENTASE FROM M_RESIKO INNER JOIN T_NASABAH ON T_NASABAH.BOBOT_RESIKO = M_RESIKO.BOBOT_RESIKO INNER JOIN T_PLANNER ON T_PLANNER.BCA_ID=T_NASABAH.BCA_ID WHERE T_PLANNER.BCA_ID=V_BCA_ID AND M_RESIKO.BOBOT_RESIKO=V_BOBOT_RESIKO AND M_RESIKO.ID_JENIS_REKSADANA=P_ID_JENIS_REKSADANA;
    
    SP_PERKIRAAN_KEUNTUNGAN_PLANNER(P_ID_PLAN,P_ID_JENIS_REKSADANA,RETURN_ON_INVESTMENT);
    ONE_TIME_RETURN_ON_INVESTMENT:=RETURN_ON_INVESTMENT/REPEAT_INVESTMENT;
    INVESTMENT_PREDICTION:=((GOAL_AMOUNT-CURR_AMOUNT)/REPEAT_INVESTMENT)-(ONE_TIME_RETURN_ON_INVESTMENT*((GOAL_AMOUNT-CURR_AMOUNT)/REPEAT_INVESTMENT));
    
    P_RESULT:=INVESTMENT_PREDICTION;
END SP_NOMINAL_YANG_HARUS_DITABUNG;

create or replace NONEDITIONABLE PROCEDURE SP_PERKIRAAN_KEUNTUNGAN_PLANNER 
(
    P_ID_PLAN IN T_REKSADANA_NASABAH.ID_PLAN%TYPE,
    P_ID_JENIS_REKSADANA IN NUMBER,
    P_RESULT OUT VARCHAR2
    )
AS 

DATEDIFF NUMBER;
PERKIRAAN_TOTAL_KEUNTUNGAN NUMBER;
AVERAGE_KEUNTUNGAN NUMBER;
BEGIN

PERKIRAAN_TOTAL_KEUNTUNGAN:=0;
SELECT DUE_DATE-SYSDATE INTO DATEDIFF FROM T_PLANNER WHERE ID_PLAN=P_ID_PLAN;
LOOP 
EXIT WHEN DATEDIFF<=0;

        IF DATEDIFF>=365 THEN
        SP_AVERAGE_REKSADANA_NASABAH (1,'YEAR_ON_YEAR_NAB',P_ID_JENIS_REKSADANA,AVERAGE_KEUNTUNGAN);
        PERKIRAAN_TOTAL_KEUNTUNGAN:=PERKIRAAN_TOTAL_KEUNTUNGAN+AVERAGE_KEUNTUNGAN;
        DATEDIFF:=DATEDIFF-365;
        
        ELSIF DATEDIFF>=90 THEN
        SP_AVERAGE_REKSADANA_NASABAH (1,'THREE_MONTHS_NAB',P_ID_JENIS_REKSADANA,AVERAGE_KEUNTUNGAN);
        PERKIRAAN_TOTAL_KEUNTUNGAN:=PERKIRAAN_TOTAL_KEUNTUNGAN+AVERAGE_KEUNTUNGAN;
        DATEDIFF:=DATEDIFF-90;
        
        ELSIF DATEDIFF>=30 THEN
        SP_AVERAGE_REKSADANA_NASABAH (1,'MONTHLY_NAB',P_ID_JENIS_REKSADANA,AVERAGE_KEUNTUNGAN);
        PERKIRAAN_TOTAL_KEUNTUNGAN:=PERKIRAAN_TOTAL_KEUNTUNGAN+AVERAGE_KEUNTUNGAN;
        DATEDIFF:=DATEDIFF-30;
        
        ELSIF DATEDIFF>7 THEN
        SP_AVERAGE_REKSADANA_NASABAH (1,'WEEKLY_NAB',P_ID_JENIS_REKSADANA,AVERAGE_KEUNTUNGAN);
        PERKIRAAN_TOTAL_KEUNTUNGAN:=PERKIRAAN_TOTAL_KEUNTUNGAN+AVERAGE_KEUNTUNGAN;
        DATEDIFF:=DATEDIFF-7;
        
        ELSIF DATEDIFF<7 THEN
        SP_AVERAGE_REKSADANA_NASABAH (1,'WEEKLY_NAB',P_ID_JENIS_REKSADANA,AVERAGE_KEUNTUNGAN);
        AVERAGE_KEUNTUNGAN:=AVERAGE_KEUNTUNGAN/7*DATEDIFF;
        PERKIRAAN_TOTAL_KEUNTUNGAN:=PERKIRAAN_TOTAL_KEUNTUNGAN+AVERAGE_KEUNTUNGAN;
        DATEDIFF:=DATEDIFF-DATEDIFF;
        
        
        END IF;


END LOOP;

P_RESULT:=PERKIRAAN_TOTAL_KEUNTUNGAN;

END SP_PERKIRAAN_KEUNTUNGAN_PLANNER ;


create or replace NONEDITIONABLE PROCEDURE SP_UPDATE_COLUMN_PLANNER (
    P_ID_PLAN IN T_PLANNER.ID_PLAN%TYPE,
    P_NAMA_PLAN IN T_PLANNER.NAMA_PLAN%TYPE,
    P_PERIODIC IN T_PLANNER.PERIODIC%TYPE,
    P_DUE_DATE IN T_PLANNER.DUE_DATE%TYPE,
    P_RESULT OUT VARCHAR2
)AS 
BEGIN
    NULL;
    --NAMA, GOAL, PERIODIC, DUE DATE
    UPDATE T_PLANNER SET NAMA_PLAN=P_NAMA_PLAN, PERIODIC=P_PERIODIC, DUE_DATE=P_DUE_DATE WHERE ID_PLAN=P_ID_PLAN;
    P_RESULT:='1';
    EXCEPTION WHEN OTHERS THEN
    P_RESULT:='0';
END SP_UPDATE_COLUMN_PLANNER;

create or replace NONEDITIONABLE PROCEDURE SP_UPDATE_DAILY_REKSADANA_NASABAH 
(
    P_ID_PRODUK IN T_REKSADANA_NASABAH.ID_PRODUK%TYPE,
    P_NAB_SEKARANG IN T_REKSADANA_NASABAH.NAB_SEKARANG%TYPE,
    P_LAST_UPDATED_BY IN T_REKSADANA_NASABAH.LAST_UPDATE_BY%TYPE,
    P_RESULT OUT VARCHAR2
)
AS 
BEGIN
  UPDATE T_REKSADANA_NASABAH SET NAB_SEKARANG=P_NAB_SEKARANG,LAST_UPDATE_DATE=SYSDATE,LAST_UPDATE_BY=P_LAST_UPDATED_BY,STATUS_DAILY_UPDATE=1 WHERE ID_PRODUK=P_ID_PRODUK;
  P_RESULT:= CONCAT(CAST(SQL%ROWCOUNT AS VARCHAR2),' ROW AFFECTED');
  COMMIT;
 
  RETURN;
  
EXCEPTION WHEN OTHERS THEN
P_RESULT:='GAGAL';
return;

END SP_UPDATE_DAILY_REKSADANA_NASABAH;

create or replace NONEDITIONABLE PROCEDURE SP_UPDATE_JENIS_REKSADANA
(
P_ID IN m_jenis_reksadana.id_jenis_reksadana%TYPE,
P_NAMA IN m_jenis_reksadana.nama_jenis%TYPE,
P_UPDATED_BY IN m_jenis_reksadana.LAST_UPDATE_BY%TYPE,
P_STATUS OUT VARCHAR2
)
AS 
BEGIN
  UPDATE M_JENIS_REKSADANA SET NAMA_JENIS=P_NAMA ,LAST_UPDATE_DATE=SYSDATE,LAST_UPDATE_BY=P_UPDATED_BY WHERE ID_JENIS_REKSADANA=P_ID;
  P_STATUS:='1';
  RETURN;
  EXCEPTION WHEN OTHERS THEN
        P_STATUS:='SOMETHING WENT WRONG';
  RETURN;
END SP_UPDATE_JENIS_REKSADANA;

create or replace NONEDITIONABLE PROCEDURE SP_UPDATE_PLANNER 
(   P_ID_PLAN IN T_REKSADANA_NASABAH.ID_PLAN%TYPE,
    P_BCA_ID IN T_PLANNER.BCA_ID%TYPE,
    P_RESULT OUT VARCHAR2
    )
AS 
V_CURRENT_AMOUNT NUMBER;
V_STATUS NUMBER;
V_NEXT_TARGET_AMOUNT NUMBER;
V_GOAL_AMOUNT T_PLANNER.GOAL_AMOUNT%TYPE;
V_PRESENTASE NUMBER;
V_RANDOMIZE VARCHAR2(9);
V_RAND_TEMP VARCHAR2(1);
V_RANDOMIZE_TEMP VARCHAR(1);
BEGIN

SP_GET_CURRENT_AMOUNT_PLANNER(P_ID_PLAN,P_BCA_ID,V_STATUS,V_CURRENT_AMOUNT);
SP_GET_NEXT_TARGET_AMOUNT_PLANNER(P_ID_PLAN,V_NEXT_TARGET_AMOUNT);
------------------------------RANDOMIZE PUZZLE------------------------------
V_RANDOMIZE:='000000000';
SELECT GOAL_AMOUNT INTO V_GOAL_AMOUNT FROM T_PLANNER WHERE ID_PLAN=P_ID_PLAN;
V_PRESENTASE:=(V_CURRENT_AMOUNT/V_GOAL_AMOUNT)*100/11.1111;
V_PRESENTASE:=FLOOR(V_PRESENTASE);
V_RANDOMIZE_TEMP:=1;
    LOOP
    EXIT WHEN V_PRESENTASE<=0;
    V_PRESENTASE:=V_PRESENTASE-1;
        LOOP EXIT WHEN V_RANDOMIZE_TEMP=0;
            SELECT FLOOR(dbms_random.value(0,8)) into V_RAND_TEMP FROM DUAL;
            SELECT SUBSTR(V_RANDOMIZE,V_RAND_TEMP,1) INTO V_RANDOMIZE_TEMP from dual;
            V_RANDOMIZE:=replacepos(V_RANDOMIZE,'1',V_RAND_TEMP);
        END LOOP;
    END LOOP;
------------------------------RANDOMIZE PUZZLE------------------------------
UPDATE T_PLANNER SET CURRENT_AMOUNT=V_CURRENT_AMOUNT, FLAG_CHECKER=V_STATUS,NEXT_TARGET_AMOUNT=V_NEXT_TARGET_AMOUNT,PUZZLE_RANDOMIZE=V_RANDOMIZE WHERE ID_PLAN=P_ID_PLAN;
P_RESULT:='1';
EXCEPTION WHEN OTHERS THEN
P_RESULT:='0';
END SP_UPDATE_PLANNER;


create or replace NONEDITIONABLE PROCEDURE SP_UPDATE_REKSADANA_NASABAH_BELI 
(
    P_BCA_ID IN T_REKSADANA_NASABAH.BCA_ID%TYPE,
    P_ID_PRODUK IN T_REKSADANA_NASABAH.ID_PRODUK%TYPE,
    P_ID_PLAN IN T_REKSADANA_NASABAH.ID_PLAN%TYPE,
    P_JUMLAH_UNIT IN T_REKSADANA_NASABAH.JUMLAH_UNIT%TYPE,
    P_NAB_BELI IN T_REKSADANA_NASABAH.NAB_RERATA%TYPE,
    P_LAST_UPDATED_BY IN T_REKSADANA_NASABAH.LAST_UPDATE_BY%TYPE,
    P_STATUS OUT VARCHAR2
)
AS
V_JUMLAH_UNIT T_REKSADANA_NASABAH.JUMLAH_UNIT%TYPE;
V_NAB_RERATA T_REKSADANA_NASABAH.NAB_RERATA%TYPE;
V_PROPORSIONAL_UNIT_BELI T_REKSADANA_NASABAH.JUMLAH_UNIT%TYPE;
V_PROPORSIONAL_UNIT_RERATA T_REKSADANA_NASABAH.JUMLAH_UNIT%TYPE;
V_HARGA T_REKSADANA_NASABAH.NAB_RERATA%TYPE;
BEGIN
  SELECT JUMLAH_UNIT,NAB_RERATA INTO V_JUMLAH_UNIT,V_NAB_RERATA FROM T_REKSADANA_NASABAH WHERE BCA_ID=P_BCA_ID AND ID_PLAN=P_ID_PLAN AND ID_PRODUK=P_ID_PRODUK;
  V_PROPORSIONAL_UNIT_RERATA:=(V_JUMLAH_UNIT/(V_JUMLAH_UNIT+P_JUMLAH_UNIT))*V_NAB_RERATA;
  V_PROPORSIONAL_UNIT_BELI:=(P_JUMLAH_UNIT/(V_JUMLAH_UNIT+P_JUMLAH_UNIT))*P_NAB_BELI;
  V_HARGA:=V_PROPORSIONAL_UNIT_BELI+V_PROPORSIONAL_UNIT_RERATA;
  UPDATE T_REKSADANA_NASABAH SET JUMLAH_UNIT=JUMLAH_UNIT+P_JUMLAH_UNIT, NAB_RERATA=V_HARGA, LAST_UPDATE_BY=P_LAST_UPDATED_BY,LAST_UPDATE_DATE=SYSDATE WHERE BCA_ID=P_BCA_ID AND ID_PRODUK=P_ID_PRODUK;
  P_STATUS:='1';
EXCEPTION WHEN OTHERS THEN
        P_STATUS:='SOMETHING WENT WRONG';
  RETURN;
END SP_UPDATE_REKSADANA_NASABAH_BELI;

create or replace NONEDITIONABLE PROCEDURE SP_UPDATE_REKSADANA_NASABAH_JUAL_UANG
(
    P_BCA_ID IN T_REKSADANA_NASABAH.BCA_ID%TYPE,
    P_ID_PRODUK IN T_REKSADANA_NASABAH.ID_PRODUK%TYPE,
    P_ID_PLAN IN T_REKSADANA_NASABAH.ID_PLAN%TYPE,
    P_JUMLAH_UANG IN NUMBER,
    P_LAST_UPDATED_BY IN T_REKSADANA_NASABAH.LAST_UPDATE_BY%TYPE,
    P_JUMLAH_UNIT OUT VARCHAR2,
    P_NAB OUT VARCHAR2
)
AS
V_JUMLAH_UNIT T_REKSADANA_NASABAH.JUMLAH_UNIT%TYPE;
V_NAB_SEKARANG T_REKSADANA_NASABAH.NAB_SEKARANG%TYPE;
V_TOTAL NUMBER;
BEGIN
SELECT JUMLAH_UNIT,NAB_SEKARANG INTO V_JUMLAH_UNIT,V_NAB_SEKARANG FROM T_REKSADANA_NASABAH WHERE BCA_ID=P_BCA_ID AND ID_PLAN=P_ID_PLAN AND ID_PRODUK=P_ID_PRODUK;
V_TOTAL:=V_JUMLAH_UNIT*V_NAB_SEKARANG;
    IF V_TOTAL>P_JUMLAH_UANG THEN
        V_JUMLAH_UNIT:=P_JUMLAH_UANG/V_NAB_SEKARANG;
        P_JUMLAH_UNIT:=V_JUMLAH_UNIT;
        UPDATE T_REKSADANA_NASABAH SET JUMLAH_UNIT=JUMLAH_UNIT-V_JUMLAH_UNIT,LAST_UPDATE_DATE=SYSDATE,LAST_UPDATE_BY=P_LAST_UPDATED_BY WHERE BCA_ID=P_BCA_ID AND ID_PLAN=P_ID_PLAN AND ID_PRODUK=P_ID_PRODUK;
        P_NAB:=V_NAB_SEKARANG;
        COMMIT;
    ELSE
        P_JUMLAH_UNIT:='JUMLAH UANG YANG DIMASUKAN TERLALU BESAR';
        RETURN;
    END IF;
EXCEPTION WHEN OTHERS THEN
        P_JUMLAH_UNIT:='SOMETHING WENT WRONG';
RETURN;
END SP_UPDATE_REKSADANA_NASABAH_JUAL_UANG;