--FUNCTION_NATAN
CREATE OR REPLACE FUNCTION F_GET_KODE_BELI
RETURN T_TRANSAKSI_BELI.ID_TRANS_BELI%TYPE
IS
	V_PREFIX VARCHAR2(7);
	V_CTR NUMBER;
BEGIN
	V_PREFIX := 'B'||TO_CHAR(SYSDATE,'YYMMDD');
	SELECT NVL(MAX(SUBSTR(ID_TRANS_BELI,8,5)),0) + 1 INTO V_CTR FROM T_TRANSAKSI_BELI;
	
	RETURN V_PREFIX || LPAD(V_CTR,5,'0');
END;
/
SHOW ERR;

CREATE OR REPLACE FUNCTION F_GET_KODE_JUAL
RETURN T_TRANSAKSI_JUAL.ID_TRANS_JUAL%TYPE
IS
	V_PREFIX VARCHAR2(7);
	V_CTR NUMBER;
BEGIN
	V_PREFIX := 'J'||TO_CHAR(SYSDATE,'YYMMDD');
	SELECT NVL(MAX(SUBSTR(ID_TRANS_JUAL,8,5)),0) + 1 INTO V_CTR FROM T_TRANSAKSI_JUAL;
	
	RETURN V_PREFIX || LPAD(V_CTR,5,'0');
END;
/
SHOW ERR;

CREATE OR REPLACE FUNCTION F_GET_KODEPROMO_CTR
RETURN T_PROMO.KODE_PROMO%TYPE
IS
	V_MAX_CTR NUMBER;
BEGIN
	SELECT NVL(MAX(KODE_PROMO)+1,1) INTO V_MAX_CTR FROM T_PROMO WHERE REGEXP_LIKE(KODE_PROMO, '^[^a-zA-Z]*$');
	RETURN LPAD(V_MAX_CTR,10,'0');
END;
/
SHOW ERR;

--SP_NATAN
CREATE OR REPLACE PROCEDURE SP_INSERT_DAILY_NAB(
	P_ID_PRODUK IN T_DAILY_NAB.ID_PRODUK%TYPE,
	P_NAB_DAILY IN T_DAILY_NAB.NAB_DAILY%TYPE,
	P_LAST_UPDATE_BY IN T_DAILY_NAB.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)IS
	V_ROW_COUNT NUMBER;
BEGIN
	SELECT COUNT(ID_PRODUK) INTO V_ROW_COUNT FROM T_DAILY_NAB WHERE ID_PRODUK = P_ID_PRODUK AND TO_CHAR(SYSDATE,'DD-MM-YYYY') = TO_CHAR(DATE_DAILY,'DD-MM-YYYY');
	P_RESULT := 'GAGAL';
	IF V_ROW_COUNT = 0 THEN
		INSERT INTO T_DAILY_NAB(ID_DAILY, NAB_DAILY,DATE_DAILY,ID_PRODUK, CREATION_DATE, LAST_UPDATE_DATE, LAST_UPDATE_BY) VALUES(NULL, P_NAB_DAILY, SYSDATE, P_ID_PRODUK,SYSDATE,SYSDATE,P_LAST_UPDATE_BY);
		P_RESULT := 'SUKSES';
	ELSE
		UPDATE T_DAILY_NAB SET NAB_DAILY = P_NAB_DAILY, LAST_UPDATE_BY = P_LAST_UPDATE_BY, LAST_UPDATE_DATE = SYSDATE WHERE ID_PRODUK = P_ID_PRODUK AND TRUNC(DATE_DAILY) = TRUNC(SYSDATE);
		
		IF SQL%ROWCOUNT = 1 THEN
			P_RESULT := 'SUKSES';
		ELSE
			P_RESULT := 'GAGAL';
		END IF;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_LOOKUP_PAST_NAB(
	P_ID_PRODUK IN T_DAILY_NAB.ID_PRODUK%TYPE,
	P_YEAR_ON_YEAR_NAB OUT T_PRODUK_REKSADANA.YEAR_ON_YEAR_NAB%TYPE,
	P_THREE_MONTHS_NAB OUT T_PRODUK_REKSADANA.THREE_MONTHS_NAB%TYPE,
	P_MONTHLY_NAB OUT T_PRODUK_REKSADANA.MONTHLY_NAB%TYPE,
	P_WEEKLY_NAB OUT T_PRODUK_REKSADANA.WEEKLY_NAB%TYPE,
	P_RESULT OUT VARCHAR2
)
IS
BEGIN
	SELECT NAB_DAILY INTO P_WEEKLY_NAB FROM T_DAILY_NAB WHERE ID_PRODUK = P_ID_PRODUK AND DATE_DAILY = (SELECT MAX(DATE_DAILY) FROM T_DAILY_NAB WHERE ID_PRODUK = P_ID_PRODUK AND TRUNC(DATE_DAILY) <= TRUNC(SYSDATE - 7));
	
	SELECT NAB_DAILY INTO P_MONTHLY_NAB FROM T_DAILY_NAB WHERE ID_PRODUK = P_ID_PRODUK AND DATE_DAILY = (SELECT MAX(DATE_DAILY) FROM T_DAILY_NAB WHERE ID_PRODUK = P_ID_PRODUK AND TRUNC(DATE_DAILY) <= TRUNC(ADD_MONTHS(SYSDATE,-1)));
	
	SELECT NAB_DAILY INTO P_THREE_MONTHS_NAB FROM T_DAILY_NAB WHERE ID_PRODUK = P_ID_PRODUK AND DATE_DAILY = (SELECT MAX(DATE_DAILY)  FROM T_DAILY_NAB WHERE ID_PRODUK = P_ID_PRODUK AND TRUNC(DATE_DAILY) <= TRUNC(ADD_MONTHS(SYSDATE,-3)));
	
	SELECT NAB_DAILY INTO P_YEAR_ON_YEAR_NAB FROM T_DAILY_NAB WHERE ID_PRODUK = P_ID_PRODUK AND DATE_DAILY = (SELECT MAX(DATE_DAILY) FROM T_DAILY_NAB WHERE ID_PRODUK = P_ID_PRODUK AND TRUNC(DATE_DAILY) <= TRUNC(ADD_MONTHS(SYSDATE,-12)));
	
	P_RESULT := 'SUKSES';
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		P_RESULT := 'NO DATA HISTORY';
	WHEN TOO_MANY_ROWS THEN
		P_RESULT := 'GAGAL';
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_UPDATE_PRODUK_DAILY(
	P_ID_PRODUK IN T_PRODUK_REKSADANA.ID_PRODUK%TYPE,
	P_NAB IN T_PRODUK_REKSADANA.NAB%TYPE,
	P_LAST_UPDATE_BY IN T_PRODUK_REKSADANA.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)IS
	V_YOY T_PRODUK_REKSADANA.YEAR_ON_YEAR_NAB%TYPE;
	V_THREEMONTHS T_PRODUK_REKSADANA.THREE_MONTHS_NAB%TYPE;
	V_MONTHLY T_PRODUK_REKSADANA.MONTHLY_NAB%TYPE;
	V_WEEKLY T_PRODUK_REKSADANA.WEEKLY_NAB%TYPE;
BEGIN
	SP_LOOKUP_PAST_NAB(P_ID_PRODUK, V_YOY, V_THREEMONTHS, V_MONTHLY, V_WEEKLY, P_RESULT);

	UPDATE T_PRODUK_REKSADANA SET NAB = P_NAB, YEAR_ON_YEAR_NAB = V_YOY, THREE_MONTHS_NAB = V_THREEMONTHS, MONTHLY_NAB = V_MONTHLY, WEEKLY_NAB = V_WEEKLY, LAST_UPDATE_DATE = SYSDATE, LAST_UPDATE_BY = P_LAST_UPDATE_BY WHERE ID_PRODUK = P_ID_PRODUK;
	
	IF SQL%ROWCOUNT = 1 THEN
		SP_INSERT_DAILY_NAB(P_ID_PRODUK, P_NAB, P_LAST_UPDATE_BY, P_RESULT);
		IF P_RESULT = 'SUKSES' THEN
			COMMIT;
		ELSE
			ROLLBACK;
		END IF;
	ELSE
		ROLLBACK;
		P_RESULT := 'GAGAL';
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_UPDATE_T_PRODUK_REKSADANA(
	P_ID_PRODUK IN T_PRODUK_REKSADANA.ID_PRODUK%TYPE,
	P_MINIMUM_UNIT IN T_PRODUK_REKSADANA.MINIMUM_UNIT%TYPE,
	P_EXPENSE_RATIO IN T_PRODUK_REKSADANA.EXPENSE_RATIO%TYPE,
	P_NAB IN T_PRODUK_REKSADANA.NAB%TYPE,
	P_TOTAL_AUM IN T_PRODUK_REKSADANA.TOTAL_AUM%TYPE,
	P_MANAGER_INVESTASI IN T_PRODUK_REKSADANA.MANAGER_INVESTASI%TYPE,
	P_TINGKAT_RESIKO IN T_PRODUK_REKSADANA.TINGKAT_RESIKO%TYPE,
	P_BANK_KUSTODIAN IN T_PRODUK_REKSADANA.BANK_KUSTODIAN%TYPE,
	P_BANK_PENAMPUNG IN T_PRODUK_REKSADANA.BANK_PENAMPUNG%TYPE,
	P_LAST_UPDATE_BY IN T_PRODUK_REKSADANA.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)IS
	V_YOY T_PRODUK_REKSADANA.YEAR_ON_YEAR_NAB%TYPE;
	V_THREEMONTHS T_PRODUK_REKSADANA.THREE_MONTHS_NAB%TYPE;
	V_MONTHLY T_PRODUK_REKSADANA.MONTHLY_NAB%TYPE;
	V_WEEKLY T_PRODUK_REKSADANA.WEEKLY_NAB%TYPE;
BEGIN
	SP_LOOKUP_PAST_NAB(P_ID_PRODUK, V_YOY, V_THREEMONTHS, V_MONTHLY, V_WEEKLY, P_RESULT);
	IF P_RESULT = 'SUKSES' THEN
		UPDATE T_PRODUK_REKSADANA SET MINIMUM_UNIT = P_MINIMUM_UNIT, EXPENSE_RATIO = P_EXPENSE_RATIO, NAB = P_NAB, TOTAL_AUM = P_TOTAL_AUM, MANAGER_INVESTASI = P_MANAGER_INVESTASI, TINGKAT_RESIKO = P_TINGKAT_RESIKO, BANK_KUSTODIAN = P_BANK_KUSTODIAN, BANK_PENAMPUNG = P_BANK_PENAMPUNG, YEAR_ON_YEAR_NAB = V_YOY, THREE_MONTHS_NAB = V_THREEMONTHS, MONTHLY_NAB = V_MONTHLY, WEEKLY_NAB = V_WEEKLY, LAST_UPDATE_DATE = SYSDATE, LAST_UPDATE_BY = P_LAST_UPDATE_BY WHERE ID_PRODUK = P_ID_PRODUK;
		
		IF SQL%ROWCOUNT = 1 THEN
			SP_INSERT_DAILY_NAB(P_ID_PRODUK, P_NAB, P_LAST_UPDATE_BY, P_RESULT);
			IF P_RESULT = 'SUKSES' THEN
				COMMIT;
			ELSE
				ROLLBACK;
			END IF;
		ELSE
			ROLLBACK;
			P_RESULT := 'GAGAL';
		END IF;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_ADD_PROMO_WITH_KODE(
	P_KODE_PROMO IN T_PROMO.KODE_PROMO%TYPE,
	P_TITLE IN T_PROMO.TITLE%TYPE,
	P_SUBTITLE IN T_PROMO.SUBTITLE%TYPE,
	P_TANGGAL_MULAI IN T_PROMO.TANGGAL_MULAI%TYPE,
	P_TANGGAL_SELESAI IN T_PROMO.TANGGAL_SELESAI%TYPE,
	P_DESKRIPSI IN T_PROMO.DESKRIPSI%TYPE,
	P_CASHBACK IN T_PROMO.CASHBACK%TYPE,
	P_MINIMUM_TRANSACTION IN T_PROMO.MINIMUM_TRANSACTION%TYPE,
	P_LAST_UPDATE_BY IN T_PROMO.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)
IS
BEGIN
	INSERT INTO T_PROMO(KODE_PROMO, TITLE, SUBTITLE, TANGGAL_MULAI, TANGGAL_SELESAI, DESKRIPSI, CASHBACK, MINIMUM_TRANSACTION, CREATION_DATE, LAST_UPDATE_DATE, LAST_UPDATE_BY) VALUES(P_KODE_PROMO, P_TITLE, P_SUBTITLE, P_TANGGAL_MULAI, P_TANGGAL_SELESAI, P_DESKRIPSI, P_CASHBACK, P_MINIMUM_TRANSACTION,SYSDATE,SYSDATE, P_LAST_UPDATE_BY);
	COMMIT;
	P_RESULT := 'SUKSES';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		P_RESULT := 'DUPLICATE';
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_ADD_PROMO_AKUMULASI(
	P_TITLE IN T_PROMO.TITLE%TYPE,
	P_SUBTITLE IN T_PROMO.SUBTITLE%TYPE,
	P_TANGGAL_MULAI IN T_PROMO.TANGGAL_MULAI%TYPE,
	P_TANGGAL_SELESAI IN T_PROMO.TANGGAL_SELESAI%TYPE,
	P_DESKRIPSI IN T_PROMO.DESKRIPSI%TYPE,
	P_CASHBACK IN T_PROMO.CASHBACK%TYPE,
	P_TARGET_AKUMULASI IN T_PROMO.TARGET_AKUMULASI%TYPE,
	P_LAST_UPDATE_BY IN T_PROMO.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)
IS
	V_TEMP_KODE T_PROMO.KODE_PROMO%TYPE;
BEGIN
	V_TEMP_KODE:= F_GET_KODEPROMO_CTR;
	INSERT INTO T_PROMO(TITLE, SUBTITLE, KODE_PROMO, TANGGAL_MULAI, TANGGAL_SELESAI, DESKRIPSI, CASHBACK, TARGET_AKUMULASI, CREATION_DATE, LAST_UPDATE_DATE, LAST_UPDATE_BY) VALUES(P_TITLE, P_SUBTITLE, V_TEMP_KODE, P_TANGGAL_MULAI, P_TANGGAL_SELESAI, P_DESKRIPSI, P_CASHBACK, P_TARGET_AKUMULASI,SYSDATE,SYSDATE, P_LAST_UPDATE_BY);
	COMMIT;
	P_RESULT := V_TEMP_KODE;
EXCEPTION
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_USE_KODEPROMO(
	P_BCA_ID IN T_NASABAH.BCA_ID%TYPE,
	P_KODE_PROMO IN T_PROMO.KODE_PROMO%TYPE,
	P_NOMINAL IN NUMBER,
	P_LAST_UPDATE_BY IN T_PROMO.LAST_UPDATE_BY%TYPE,
	P_DO_COMMIT IN NUMBER,
	P_RESULT OUT VARCHAR2
)IS
	V_DATE_BEGIN DATE;
	V_DATE_END DATE;
	V_PARENT_KEY_NOT_FOUND EXCEPTION;
	V_MINIMUM T_PROMO.MINIMUM_TRANSACTION%TYPE;
	PRAGMA EXCEPTION_INIT(V_PARENT_KEY_NOT_FOUND, -2291);
BEGIN
	SELECT TANGGAL_MULAI, TANGGAL_SELESAI, MINIMUM_TRANSACTION INTO V_DATE_BEGIN, V_DATE_END, V_MINIMUM FROM T_PROMO WHERE KODE_PROMO = P_KODE_PROMO;
	
	IF SYSDATE BETWEEN V_DATE_BEGIN AND V_DATE_END AND V_MINIMUM <= P_NOMINAL THEN
		INSERT INTO T_NASABAH_PROMO(BCA_ID,KODE_PROMO,USAGE_FLAG,CREATION_DATE,LAST_UPDATE_DATE,LAST_UPDATE_BY) VALUES(P_BCA_ID,P_KODE_PROMO,1,SYSDATE,SYSDATE,P_LAST_UPDATE_BY);
		IF P_DO_COMMIT = 1 THEN
			COMMIT;
		END IF;
		P_RESULT := 'SUKSES';
	ELSE 
		IF V_MINIMUM > P_NOMINAL THEN
			P_RESULT := 'PROMO NOT REACH MINIMUM';
		ELSE
			P_RESULT := 'OUT OF DATE';
		END IF;
	END IF;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		P_RESULT := 'USED PROMO';
	WHEN V_PARENT_KEY_NOT_FOUND THEN
		P_RESULT := 'KODE PROMO NOT FOUND';
	WHEN OTHERS THEN
		P_RESULT := 'KODE PROMO NOT FOUND';
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_ACTIVATE_PROMO_AKUMULASI(
	P_BCA_ID IN T_NASABAH.BCA_ID%TYPE,
	P_KODE_PROMO IN T_PROMO.KODE_PROMO%TYPE,
	P_LAST_UPDATE_BY IN T_PROMO.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)IS
V_TARGET_AKUMULASI T_PROMO.TARGET_AKUMULASI%TYPE;
BEGIN
	SELECT TARGET_AKUMULASI INTO V_TARGET_AKUMULASI FROM T_PROMO WHERE KODE_PROMO = P_KODE_PROMO AND TRUNC(SYSDATE) BETWEEN TANGGAL_MULAI AND TANGGAL_SELESAI;
	
	INSERT INTO T_NASABAH_PROMO(BCA_ID,KODE_PROMO,USAGE_FLAG,AKUMULASI,TARGET_AKUMULASI,CREATION_DATE,LAST_UPDATE_DATE,LAST_UPDATE_BY) VALUES(P_BCA_ID,P_KODE_PROMO,0,0,V_TARGET_AKUMULASI,SYSDATE,SYSDATE,'INSERT_SYSTEM');
	COMMIT;
	P_RESULT := 'SUKSES';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		P_RESULT := 'ALREADY CLAIMED';
		ROLLBACK;
	WHEN NO_DATA_FOUND THEN
		P_RESULT := 'NOT FOUND';
		ROLLBACK;
	WHEN TOO_MANY_ROWS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;		
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_INCREASE_AKUMULASI(
	P_BCA_ID IN T_NASABAH.BCA_ID%TYPE,
	P_INCREMENT IN NUMBER,
	P_LAST_UPDATE_BY IN T_NASABAH_PROMO.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)IS
BEGIN
	UPDATE T_NASABAH_PROMO SET AKUMULASI = AKUMULASI + P_INCREMENT, LAST_UPDATE_DATE = SYSDATE, LAST_UPDATE_BY = P_LAST_UPDATE_BY WHERE BCA_ID = P_BCA_ID AND REGEXP_LIKE(KODE_PROMO, '^[^a-zA-Z]*$') AND USAGE_FLAG = 0;
	
	COMMIT;
	P_RESULT := 'SUKSES';
EXCEPTION
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_CLAIM_AKUMULASI(
	P_BCA_ID IN T_NASABAH.BCA_ID%TYPE,
	P_KODE_PROMO IN T_PROMO.KODE_PROMO%TYPE,
	P_LAST_UPDATE_BY IN T_NASABAH_PROMO.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)
IS
BEGIN
	UPDATE T_NASABAH_PROMO SET USAGE_FLAG = 1,LAST_UPDATE_DATE = SYSDATE, LAST_UPDATE_BY = P_LAST_UPDATE_BY WHERE BCA_ID = P_BCA_ID AND KODE_PROMO = P_KODE_PROMO AND USAGE_FLAG = 0 AND AKUMULASI >= TARGET_AKUMULASI;
	
	IF SQL%ROWCOUNT = 1 THEN
		COMMIT;
		P_RESULT := 'SUKSES';
	ELSE
		ROLLBACK;
		P_RESULT := 'GAGAL';
	END IF;
EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
		P_RESULT := 'GAGAL';
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_INSERT_MASTER_RESIKO(
	P_BOBOT_RESIKO IN M_RESIKO.BOBOT_RESIKO%TYPE,
	P_PERSENTASE IN M_RESIKO.PERSENTASE%TYPE,
	P_ID_JENIS_REKSADANA IN M_RESIKO.ID_JENIS_REKSADANA%TYPE,
	P_LAST_UPDATE_BY IN M_RESIKO.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)
IS
	V_ROW_COUNT NUMBER;
BEGIN
	SELECT COUNT(BOBOT_RESIKO) INTO V_ROW_COUNT FROM M_RESIKO WHERE
	BOBOT_RESIKO = P_BOBOT_RESIKO AND ID_JENIS_REKSADANA = P_ID_JENIS_REKSADANA;
	IF V_ROW_COUNT = 0 THEN
		INSERT INTO M_RESIKO(BOBOT_RESIKO, PERSENTASE, ID_JENIS_REKSADANA, CREATION_DATE, LAST_UPDATE_DATE, LAST_UPDATE_BY) VALUES(P_BOBOT_RESIKO, P_PERSENTASE, P_ID_JENIS_REKSADANA, SYSDATE, SYSDATE, P_LAST_UPDATE_BY);
		COMMIT;
		P_RESULT := 'SUKSES';
	ELSE
		P_RESULT := 'GAGAL';
	END IF;
EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
		P_RESULT := 'GAGAL';
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_UPDATE_MASTER_RESIKO(
	P_BOBOT_RESIKO IN M_RESIKO.BOBOT_RESIKO%TYPE,
	P_PERSENTASE IN M_RESIKO.PERSENTASE%TYPE,
	P_ID_JEN	IS_REKSADANA IN M_RESIKO.ID_JENIS_REKSADANA%TYPE,
	P_LAST_UPDATE_BY IN M_RESIKO.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)
IS
	V_ROW_COUNT NUMBER;
BEGIN
	UPDATE M_RESIKO SET PERSENTASE = P_PERSENTASE, LAST_UPDATE_DATE = SYSDATE, LAST_UPDATE_BY = P_LAST_UPDATE_BY WHERE BOBOT_RESIKO = P_BOBOT_RESIKO AND ID_JENIS_REKSADANA = P_ID_JENIS_REKSADANA;
	
	IF SQL%ROWCOUNT = 1 THEN
		COMMIT;
		P_RESULT := 'SUKSES';
	ELSE
		ROLLBACK;
		P_RESULT := 'NOT FOUND';
	END IF;
EXCEPTION
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_REQUEST_PEMBELIAN(
	P_BCA_ID IN T_TRANSAKSI_BELI.BCA_ID%TYPE,
	P_ID_PRODUK IN T_TRANSAKSI_BELI.BCA_ID%TYPE,
	P_ID_PLAN IN T_TRANSAKSI_BELI.ID_PLAN%TYPE,
	P_TOTAL_BELI IN T_TRANSAKSI_BELI.TOTAL_BELI%TYPE,
	P_KODE_PROMO IN T_TRANSAKSI_BELI.KODE_PROMO%TYPE,
	P_LAST_UPDATE_BY IN T_TRANSAKSI_BELI.LAST_UPDATE_BY%TYPE,
	P_DO_COMMIT IN NUMBER,
    P_RESULT OUT VARCHAR2
)
IS
	V_PARENT_KEY_NOT_FOUND EXCEPTION;
	PRAGMA EXCEPTION_INIT(V_PARENT_KEY_NOT_FOUND, -2291);
BEGIN
	INSERT INTO T_TRANSAKSI_BELI(ID_TRANS_BELI, BCA_ID, ID_PRODUK, ID_PLAN, TOTAL_BELI, KODE_PROMO, STATUS_PEMBELIAN, TANGGAL_ORDER_BELI, CREATION_DATE, LAST_UPDATE_DATE, LAST_UPDATE_BY) VALUES(F_GET_KODE_BELI, P_BCA_ID, P_ID_PRODUK, P_ID_PLAN, P_TOTAL_BELI, P_KODE_PROMO, 1, SYSDATE, SYSDATE, SYSDATE, P_LAST_UPDATE_BY);
	IF P_DO_COMMIT = '1' THEN
		COMMIT;
	END IF;
	P_RESULT:= 'SUKSES';
EXCEPTION
	WHEN V_PARENT_KEY_NOT_FOUND THEN
		P_RESULT := 'PARENT NOT FOUND';
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_VERIFIKASI_BANK_BELI(
	P_ID_TRANS_BELI IN T_TRANSAKSI_BELI.ID_TRANS_BELI%TYPE,
	P_PASSWORD_VENDOR IN T_PRODUK_REKSADANA.PASSWORD_VENDOR%TYPE,
	P_LAST_UPDATE_BY IN T_PRODUK_REKSADANA.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)
IS
	V_PASSWORD_VENDOR T_PRODUK_REKSADANA.PASSWORD_VENDOR%TYPE;
BEGIN
	SELECT PASSWORD_VENDOR INTO V_PASSWORD_VENDOR FROM T_PRODUK_REKSADANA WHERE ID_PRODUK = (
		SELECT ID_PRODUK FROM T_TRANSAKSI_BELI WHERE ID_TRANS_BELI = P_ID_TRANS_BELI
	);
	IF V_PASSWORD_VENDOR = P_PASSWORD_VENDOR THEN
		UPDATE T_TRANSAKSI_BELI SET STATUS_PEMBELIAN = 2, TANGGAL_VERIFIKASI_BANK = SYSDATE, LAST_UPDATE_BY = P_LAST_UPDATE_BY, LAST_UPDATE_DATE = SYSDATE WHERE ID_TRANS_BELI = P_ID_TRANS_BELI AND STATUS_PEMBELIAN = 1;
		
		IF SQL%ROWCOUNT = 1 THEN
			COMMIT;
			P_RESULT := 'SUKSES';
		ELSE 
			ROLLBACK;
			P_RESULT := 'NOT FOUND';
		END IF;
	ELSE
		P_RESULT := 'WRONG PASSWORD';
	END IF;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		P_RESULT := 'NOT FOUND';
	WHEN TOO_MANY_ROWS THEN
		P_RESULT := 'GAGAL'; 
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_VERIFIKASI_PEMBELIAN(
	P_ID_TRANS_BELI IN T_TRANSAKSI_BELI.ID_TRANS_BELI%TYPE,
	P_PASSWORD_VENDOR IN T_PRODUK_REKSADANA.PASSWORD_VENDOR%TYPE,
	P_NAB IN T_TRANSAKSI_BELI.NAB%TYPE,
	P_JUMLAH_UNIT IN T_TRANSAKSI_BELI.JUMLAH_UNIT%TYPE,
	P_LAST_UPDATE_BY IN T_TRANSAKSI_BELI.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)
IS
	V_PASSWORD_VENDOR T_PRODUK_REKSADANA.PASSWORD_VENDOR%TYPE;
	V_BCA_ID T_TRANSAKSI_BELI.BCA_ID%TYPE;
	V_ID_PRODUK T_TRANSAKSI_BELI.ID_PRODUK%TYPE;
	V_ID_PLAN T_TRANSAKSI_BELI.ID_PLAN%TYPE;
	V_ROW_COUNT NUMBER;
BEGIN
	SELECT PASSWORD_VENDOR, ID_PRODUK INTO V_PASSWORD_VENDOR, V_ID_PRODUK FROM T_PRODUK_REKSADANA WHERE ID_PRODUK = (
		SELECT ID_PRODUK FROM T_TRANSAKSI_BELI WHERE ID_TRANS_BELI = P_ID_TRANS_BELI
	);
	IF V_PASSWORD_VENDOR = P_PASSWORD_VENDOR THEN
		UPDATE T_TRANSAKSI_BELI SET STATUS_PEMBELIAN = 9, TANGGAL_PEMBELIAN = SYSDATE, NAB = P_NAB, JUMLAH_UNIT = P_JUMLAH_UNIT, LAST_UPDATE_DATE = SYSDATE, LAST_UPDATE_BY = P_LAST_UPDATE_BY WHERE ID_TRANS_BELI = P_ID_TRANS_BELI AND STATUS_PEMBELIAN = 2;
		
		IF SQL%ROWCOUNT = 1 THEN
			SELECT BCA_ID, ID_PLAN INTO V_BCA_ID, V_ID_PLAN FROM T_TRANSAKSI_BELI WHERE ID_TRANS_BELI = P_ID_TRANS_BELI;
			SELECT COUNT(BCA_ID) INTO V_ROW_COUNT FROM T_REKSADANA_NASABAH WHERE BCA_ID = V_BCA_ID AND ID_PRODUK = V_ID_PRODUK AND ID_PLAN = V_ID_PLAN;
			IF V_ROW_COUNT = 0 THEN
				SP_INSERT_REKSADANA_NASABAH(V_BCA_ID, V_ID_PRODUK, V_ID_PLAN, P_JUMLAH_UNIT, P_NAB, P_NAB, P_LAST_UPDATE_BY, P_RESULT);
			ELSE
				SP_UPDATE_REKSADANA_NASABAH_BELI(V_BCA_ID, V_ID_PRODUK, V_ID_PLAN, P_JUMLAH_UNIT, P_NAB, P_LAST_UPDATE_BY, P_RESULT);
			END IF;
			IF NOT (P_RESULT = '1') THEN
				ROLLBACK;
				P_RESULT := 'GAGAL INSERT REKSADANA';
			ELSE 
				COMMIT;
				P_RESULT := 'SUKSES';
			END IF;
		ELSE 
			ROLLBACK;
			P_RESULT := 'GAGAL';
		END IF;
	ELSE
		P_RESULT := 'WRONG PASSWORD';
	END IF;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		ROLLBACK;
		P_RESULT := 'NOT FOUND';
	WHEN TOO_MANY_ROWS THEN
		ROLLBACK;
		P_RESULT := 'GAGAL';
	WHEN OTHERS THEN
		ROLLBACK;
		P_RESULT := 'GAGAL';
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_REQUEST_PENJUALAN(
	P_BCA_ID IN T_TRANSAKSI_JUAL.BCA_ID%TYPE,
	P_ID_PRODUK IN T_TRANSAKSI_JUAL.ID_PRODUK%TYPE,
	P_ID_PLAN IN T_TRANSAKSI_JUAL.ID_PLAN%TYPE,
	P_JUMLAH_UNIT IN T_TRANSAKSI_JUAL.JUMLAH_UNIT%TYPE,
	P_LAST_UPDATE_BY IN T_TRANSAKSI_JUAL.LAST_UPDATE_BY%TYPE,
	P_DO_COMMIT IN NUMBER,
    P_RESULT OUT VARCHAR2
)
IS
	V_PARENT_KEY_NOT_FOUND EXCEPTION;
	PRAGMA EXCEPTION_INIT(V_PARENT_KEY_NOT_FOUND, -2291);
BEGIN
	INSERT INTO T_TRANSAKSI_JUAL(ID_TRANS_JUAL,BCA_ID,ID_PRODUK,ID_PLAN, JUMLAH_UNIT, STATUS_PENJUALAN, TANGGAL_ORDER_JUAL, CREATION_DATE, LAST_UPDATE_DATE, LAST_UPDATE_BY) VALUES(F_GET_KODE_JUAL, P_BCA_ID, P_ID_PRODUK, P_ID_PLAN, P_JUMLAH_UNIT, 1, SYSDATE, SYSDATE, SYSDATE, P_LAST_UPDATE_BY);
	
	IF P_DO_COMMIT = 1 THEN
		COMMIT;
	END IF;
	
	P_RESULT:='SUKSES';
EXCEPTION
	WHEN V_PARENT_KEY_NOT_FOUND THEN
		P_RESULT := 'PARENT NOT FOUND';
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_VERIFIKASI_BANK_JUAL(
	P_ID_TRANS_JUAL IN T_TRANSAKSI_JUAL.ID_TRANS_JUAL%TYPE,
	P_PASSWORD_VENDOR IN T_PRODUK_REKSADANA.PASSWORD_VENDOR%TYPE,
	P_LAST_UPDATE_BY IN T_TRANSAKSI_JUAL.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)
IS
	V_PASSWORD_VENDOR T_PRODUK_REKSADANA.PASSWORD_VENDOR%TYPE;
BEGIN
	SELECT PASSWORD_VENDOR INTO V_PASSWORD_VENDOR FROM T_PRODUK_REKSADANA WHERE ID_PRODUK = (
		SELECT ID_PRODUK FROM T_TRANSAKSI_JUAL WHERE ID_TRANS_JUAL = P_ID_TRANS_JUAL
	);
	IF V_PASSWORD_VENDOR = P_PASSWORD_VENDOR THEN
		UPDATE T_TRANSAKSI_JUAL SET STATUS_PENJUALAN = 2, TANGGAL_VERIFIKASI_BANK = SYSDATE, LAST_UPDATE_DATE = SYSDATE, LAST_UPDATE_BY = P_LAST_UPDATE_BY WHERE ID_TRANS_JUAL = P_ID_TRANS_JUAL AND STATUS_PENJUALAN = 1;
		
		IF SQL%ROWCOUNT = 1 THEN
			COMMIT;
			P_RESULT := 'SUKSES';
		ELSE 
			ROLLBACK;
			P_RESULT := 'GAGAL';
			ROLLBACK;
		END IF;
	ELSE
		P_RESULT := 'WRONG PASSWORD';
		ROLLBACK;
	END IF;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
	WHEN TOO_MANY_ROWS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';	
		ROLLBACK;
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_VERIFIKASI_PENJUALAN(
	P_ID_TRANS_JUAL IN T_TRANSAKSI_JUAL.ID_TRANS_JUAL%TYPE,
	P_PASSWORD_VENDOR IN T_PRODUK_REKSADANA.PASSWORD_VENDOR%TYPE,
	P_NAB IN T_TRANSAKSI_JUAL.NAB%TYPE,
	P_LAST_UPDATE_BY IN T_TRANSAKSI_JUAL.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)
IS
	V_PASSWORD_VENDOR T_PRODUK_REKSADANA.PASSWORD_VENDOR%TYPE;
BEGIN
	SELECT PASSWORD_VENDOR INTO V_PASSWORD_VENDOR FROM T_PRODUK_REKSADANA WHERE ID_PRODUK = (
		SELECT ID_PRODUK FROM T_TRANSAKSI_JUAL WHERE ID_TRANS_JUAL = P_ID_TRANS_JUAL
	);
	IF V_PASSWORD_VENDOR = P_PASSWORD_VENDOR THEN
		UPDATE T_TRANSAKSI_JUAL SET STATUS_PENJUALAN = 9, TANGGAL_PENJUALAN = SYSDATE, NAB = P_NAB, LAST_UPDATE_DATE = SYSDATE, LAST_UPDATE_BY = P_LAST_UPDATE_BY WHERE ID_TRANS_JUAL = P_ID_TRANS_JUAL AND STATUS_PENJUALAN = 2;
		
		IF SQL%ROWCOUNT = 1 THEN
			COMMIT;
			P_RESULT := 'SUKSES';
		ELSE 
			ROLLBACK;
			P_RESULT := 'GAGAL';
		END IF;
	ELSE
		P_RESULT := 'WRONG PASSWORD';
		ROLLBACK;
	END IF;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
	WHEN TOO_MANY_ROWS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;		
END;
/
SHOW ERR;

--JAMES
CREATE OR REPLACE PROCEDURE SP_INSERT_REKSADANA_NASABAH
(
    P_BCA_ID IN T_REKSADANA_NASABAH.BCA_ID%TYPE,
    P_ID_PRODUK IN T_REKSADANA_NASABAH.ID_PRODUK%TYPE,
    P_ID_PLAN IN T_REKSADANA_NASABAH.ID_PLAN%TYPE,
    P_JUMLAH_UNIT IN T_REKSADANA_NASABAH.JUMLAH_UNIT%TYPE,
    P_NAB_RERATA IN T_REKSADANA_NASABAH.NAB_RERATA%TYPE,
    P_NAB_SEKARANG IN T_REKSADANA_NASABAH.NAB_SEKARANG%TYPE,
    P_LAST_UPDATED_BY IN T_REKSADANA_NASABAH.LAST_UPDATE_BY%TYPE,
    P_STATUS OUT VARCHAR2
)
AS 
BEGIN

  INSERT INTO T_REKSADANA_NASABAH VALUES (1,P_BCA_ID,P_ID_PRODUK,P_ID_PLAN,P_JUMLAH_UNIT,P_NAB_RERATA,P_NAB_SEKARANG,SYSDATE,SYSDATE,P_LAST_UPDATED_BY);
  P_STATUS:='1';
  COMMIT;
  RETURN;
  EXCEPTION WHEN OTHERS THEN
        P_STATUS:='SOMETHING WENT WRONG';
		ROLLBACK;
  RETURN;
END SP_INSERT_REKSADANA_NASABAH;
/

create or replace NONEDITIONABLE PROCEDURE SP_UPDATE_REKSADANA_NASABAH_BELI 
(
    P_BCA_ID IN T_REKSADANA_NASABAH.BCA_ID%TYPE,
    P_ID_PRODUK IN T_REKSADANA_NASABAH.ID_PRODUK%TYPE,
    P_ID_PLAN IN T_REKSADANA_NASABAH.ID_PLAN%TYPE,
    P_JUMLAH_UNIT IN T_REKSADANA_NASABAH.JUMLAH_UNIT%TYPE,
    P_NAB_BELI IN T_REKSADANA_NASABAH.NAB_RERATA%TYPE,
    P_LAST_UPDATED_BY IN T_REKSADANA_NASABAH.LAST_UPDATE_BY%TYPE,
    P_STATUS OUT VARCHAR2
)
AS
V_JUMLAH_UNIT T_REKSADANA_NASABAH.JUMLAH_UNIT%TYPE;
V_NAB_RERATA T_REKSADANA_NASABAH.NAB_RERATA%TYPE;
V_PROPORSIONAL_UNIT_BELI T_REKSADANA_NASABAH.JUMLAH_UNIT%TYPE;
V_PROPORSIONAL_UNIT_RERATA T_REKSADANA_NASABAH.JUMLAH_UNIT%TYPE;
V_HARGA T_REKSADANA_NASABAH.NAB_RERATA%TYPE;
BEGIN
  SELECT JUMLAH_UNIT,NAB_RERATA INTO V_JUMLAH_UNIT,V_NAB_RERATA FROM T_REKSADANA_NASABAH WHERE BCA_ID=P_BCA_ID AND ID_PLAN=P_ID_PLAN AND ID_PRODUK=P_ID_PRODUK;
  V_PROPORSIONAL_UNIT_RERATA:=(V_JUMLAH_UNIT/(V_JUMLAH_UNIT+P_JUMLAH_UNIT))*V_NAB_RERATA;
  V_PROPORSIONAL_UNIT_BELI:=(P_JUMLAH_UNIT/(V_JUMLAH_UNIT+P_JUMLAH_UNIT))*P_NAB_BELI;
  V_HARGA:=V_PROPORSIONAL_UNIT_BELI+V_PROPORSIONAL_UNIT_RERATA;
  UPDATE T_REKSADANA_NASABAH SET JUMLAH_UNIT=JUMLAH_UNIT+P_JUMLAH_UNIT, NAB_RERATA=V_HARGA, LAST_UPDATE_BY=P_LAST_UPDATED_BY,LAST_UPDATE_DATE=SYSDATE WHERE BCA_ID=P_BCA_ID AND ID_PRODUK=P_ID_PRODUK;
  P_STATUS:='1';
  COMMIT;
EXCEPTION WHEN OTHERS THEN
        P_STATUS:='SOMETHING WENT WRONG';
		ROLLBACK;
  RETURN;
END SP_UPDATE_REKSADANA_NASABAH_BELI;
/

create or replace NONEDITIONABLE PROCEDURE SP_UPDATE_REKSADANA_NASABAH_JUAL_UANG
(
    P_BCA_ID IN T_REKSADANA_NASABAH.BCA_ID%TYPE,
    P_ID_PRODUK IN T_REKSADANA_NASABAH.ID_PRODUK%TYPE,
    P_ID_PLAN IN T_REKSADANA_NASABAH.ID_PLAN%TYPE,
    P_JUMLAH_UANG IN NUMBER,
    P_LAST_UPDATED_BY IN T_REKSADANA_NASABAH.LAST_UPDATE_BY%TYPE,
    P_JUMLAH_UNIT OUT VARCHAR2,
    P_NAB OUT VARCHAR2
)
AS
V_JUMLAH_UNIT T_REKSADANA_NASABAH.JUMLAH_UNIT%TYPE;
V_NAB_SEKARANG T_REKSADANA_NASABAH.NAB_SEKARANG%TYPE;
V_TOTAL NUMBER;
V_RESULT VARCHAR2(100);
BEGIN
SELECT JUMLAH_UNIT,NAB_SEKARANG INTO V_JUMLAH_UNIT,V_NAB_SEKARANG FROM T_REKSADANA_NASABAH WHERE BCA_ID=P_BCA_ID AND ID_PLAN=P_ID_PLAN AND ID_PRODUK=P_ID_PRODUK;
V_TOTAL:=V_JUMLAH_UNIT*V_NAB_SEKARANG;
    IF V_TOTAL>P_JUMLAH_UANG THEN
        V_JUMLAH_UNIT:=P_JUMLAH_UANG/V_NAB_SEKARANG;
        P_JUMLAH_UNIT:=V_JUMLAH_UNIT;
        UPDATE T_REKSADANA_NASABAH SET JUMLAH_UNIT=JUMLAH_UNIT-V_JUMLAH_UNIT,LAST_UPDATE_DATE=SYSDATE,LAST_UPDATE_BY=P_LAST_UPDATED_BY WHERE BCA_ID=P_BCA_ID AND ID_PLAN=P_ID_PLAN AND ID_PRODUK=P_ID_PRODUK;
        P_NAB:=V_NAB_SEKARANG;
		SP_REQUEST_PENJUALAN(P_BCA_ID, P_ID_PRODUK, P_ID_PLAN, P_JUMLAH_UNIT, P_LAST_UPDATED_BY, 0, V_RESULT);
		IF V_RESULT = 'SUKSES' THEN
			COMMIT;
		ELSE
			P_JUMLAH_UNIT:='SOMETHING WENT WRONG';
			ROLLBACK;
		END IF;
    ELSE
        P_JUMLAH_UNIT:='JUMLAH UANG YANG DIMASUKAN TERLALU BESAR';
        RETURN;
    END IF;
EXCEPTION WHEN OTHERS THEN
        P_JUMLAH_UNIT:='SOMETHING WENT WRONG';
		ROLLBACK;
RETURN;
END SP_UPDATE_REKSADANA_NASABAH_JUAL_UANG;
/


--NEW UPDATE NATAN 04-01-2021
CREATE OR REPLACE PROCEDURE SP_PRE_PEMBELIAN(
	P_BCA_ID IN T_NASABAH.BCA_ID%TYPE,
	P_ID_PLAN IN T_TRANSAKSI_BELI.ID_PLAN%TYPE,
	P_NOMINAL IN NUMBER,
	P_KODE_PROMO IN T_PROMO.KODE_PROMO%TYPE,
	P_ID_PRODUCTS IN VARCHAR2,
	P_LAST_UPDATE_BY IN T_TRANSAKSI_BELI.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)IS
	V_ROWNUM NUMBER;
	V_TEMP_NOMINAL NUMBER;
	TYPE ASSOC_ARRAY IS TABLE OF NUMBER INDEX BY VARCHAR2(30);
	
	V_ARRAY_BELI ASSOC_ARRAY;
	V_ROW_ARRAY_BELI T_PRODUK_REKSADANA.ID_PRODUK%TYPE;
BEGIN
	IF P_KODE_PROMO IS NOT NULL THEN 
		SP_USE_KODEPROMO(P_BCA_ID, P_KODE_PROMO, P_NOMINAL, P_LAST_UPDATE_BY, 0, P_RESULT);
	ELSE
		P_RESULT := 'SUKSES';
	END IF;
	
	IF P_RESULT = 'SUKSES' THEN 
		SELECT COUNT(id_produk) INTO V_ROWNUM FROM T_PRODUK_REKSADANA WHERE LEVEL_RESIKO > (SELECT DISTINCT M.LEVEL_RESIKO FROM T_NASABAH N JOIN M_RESIKO M ON M.BOBOT_RESIKO = N.BOBOT_RESIKO WHERE BCA_ID = P_BCA_ID) AND P_ID_PRODUCTS LIKE '%,'||ID_PRODUK||',%';
		
		IF V_ROWNUM <> 0 THEN
			P_RESULT := 'RISK PROFILE NOT MATCH';
			ROLLBACK;
		ELSE
			FOR I IN (SELECT R.ID_JENIS_REKSADANA, R.PERSENTASE, P.ID_PRODUK, P.MINIMUM_UNIT FROM M_RESIKO R LEFT JOIN T_PRODUK_REKSADANA P ON R.ID_JENIS_REKSADANA = P.ID_JENIS_REKSADANA AND R.BOBOT_RESIKO = (SELECT BOBOT_RESIKO FROM T_NASABAH WHERE BCA_ID = P_BCA_ID) AND P_ID_PRODUCTS LIKE '%,'||P.ID_PRODUK ||',%') LOOP
				IF I.ID_PRODUK IS NULL THEN
					P_RESULT := 'MISSING PRODUCT';
					ROLLBACK;
					EXIT;
				ELSE
					V_TEMP_NOMINAL := P_NOMINAL * I.PERSENTASE / 100;
					IF V_TEMP_NOMINAL < I.MINIMUM_UNIT THEN
						P_RESULT := 'UNDER MINIMUM';
						ROLLBACK;
						EXIT;
					ELSE
						V_ARRAY_BELI(I.ID_PRODUK) := V_TEMP_NOMINAL;
					END IF;
				END IF;
			END LOOP;
			
			V_ROW_ARRAY_BELI := V_ARRAY_BELI.FIRST;
			WHILE V_ROW_ARRAY_BELI IS NOT NULL LOOP
				--DBMS_OUTPUT.PUT_LINE(V_ROW_ARRAY_BELI || '-' || V_ARRAY_BELI(V_ROW_ARRAY_BELI));
				SP_REQUEST_PEMBELIAN(P_BCA_ID, V_ROW_ARRAY_BELI, P_ID_PLAN, V_ARRAY_BELI(V_ROW_ARRAY_BELI), P_KODE_PROMO,P_LAST_UPDATE_BY, 0, P_RESULT);
				V_ROW_ARRAY_BELI := V_ARRAY_BELI.NEXT(V_ROW_ARRAY_BELI);
				IF P_RESULT <> 'SUKSES' THEN
					V_ROWNUM := 0;
					ROLLBACK;
					EXIT;
				END IF;
			END LOOP;
			IF V_ROWNUM <> 0 THEN
				UPDATE T_PLANNER SET FLAG_CHECKER = '0' WHERE ID_PLAN = P_ID_PLAN;
			END IF;
		END IF;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
		P_RESULT := 'GAGAL';
END;
/
SHOW ERR;

--
CREATE OR REPLACE PROCEDURE SP_NONAKTIF_PROMO(
	P_KODE_PROMO IN T_PROMO.KODE_PROMO%TYPE,
	P_LAST_UPDATE_BY IN T_PROMO.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)IS
BEGIN
	UPDATE T_PROMO SET TANGGAL_SELESAI = SYSDATE - 1, LAST_UPDATE_BY = P_LAST_UPDATE_BY, LAST_UPDATE_DATE = SYSDATE  WHERE KODE_PROMO = P_KODE_PROMO AND TRUNC(SYSDATE) < TANGGAL_SELESAI;
	IF SQL%ROWCOUNT = 1 THEN
		P_RESULT := 'SUKSES';
		COMMIT;
	ELSE
		P_RESULT := 'NOT FOUND';
		ROLLBACK;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
		P_RESULT:='GAGAL';
		ROLLBACK;
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_NONAKTIF_PROMO(
	P_KODE_PROMO IN T_PROMO.KODE_PROMO%TYPE,
	P_LAST_UPDATE_BY IN T_PROMO.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)IS
BEGIN
	UPDATE T_PROMO SET TANGGAL_SELESAI = SYSDATE - 1, LAST_UPDATE_BY = P_LAST_UPDATE_BY, LAST_UPDATE_DATE = SYSDATE  WHERE KODE_PROMO = P_KODE_PROMO AND SYSDATE BETWEEN TANGGAL_MULAI AND TANGGAL_SELESAI;
	
	IF SQL%ROWCOUNT = 1 THEN
		P_RESULT := 'SUKSES';
		COMMIT;
	ELSE
		P_RESULT := 'NOT FOUND';
		ROLLBACK;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
		P_RESULT:='GAGAL';
		ROLLBACK;
END;
/
SHOW ERR;	

CREATE OR REPLACE PROCEDURE SP_UPDATE_PROMO_WITH_KODE(
	P_KODE_PROMO IN T_PROMO.KODE_PROMO%TYPE,
	P_TITLE IN T_PROMO.TITLE%TYPE,
	P_SUBTITLE IN T_PROMO.SUBTITLE%TYPE,
	P_TANGGAL_MULAI IN T_PROMO.TANGGAL_MULAI%TYPE,
	P_TANGGAL_SELESAI IN T_PROMO.TANGGAL_SELESAI%TYPE,
	P_DESKRIPSI IN T_PROMO.DESKRIPSI%TYPE,
	P_CASHBACK IN T_PROMO.CASHBACK%TYPE,
	P_MINIMUM_TRANSACTION IN T_PROMO.MINIMUM_TRANSACTION%TYPE,
	P_LAST_UPDATE_BY IN T_PROMO.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)
IS
	V_DATE_BEGIN DATE;
	V_DATE_END DATE;
BEGIN
	SELECT TANGGAL_MULAI, TANGGAL_SELESAI INTO V_DATE_BEGIN, V_DATE_END FROM T_PROMO WHERE KODE_PROMO = P_KODE_PROMO;
	
	IF SYSDATE BETWEEN TRUNC(V_DATE_BEGIN) AND TRUNC(V_DATE_END) THEN
		P_RESULT := 'AKTIF PROMO';
	ELSIF TRUNC(SYSDATE) > TRUNC(V_DATE_END) THEN
		P_RESULT := 'PROMO ENDED';
	ELSIF TRUNC(SYSDATE) < TRUNC(V_DATE_BEGIN) THEN
		UPDATE T_PROMO SET TITLE = P_TITLE, SUBTITLE = P_SUBTITLE, TANGGAL_MULAI = P_TANGGAL_MULAI, TANGGAL_SELESAI = P_TANGGAL_SELESAI, DESKRIPSI = P_DESKRIPSI, CASHBACK = P_CASHBACK, MINIMUM_TRANSACTION = P_MINIMUM_TRANSACTION, LAST_UPDATE_BY = P_LAST_UPDATE_BY, LAST_UPDATE_DATE = SYSDATE WHERE KODE_PROMO = P_KODE_PROMO;
		
		IF SQL%ROWCOUNT = 1 THEN
			P_RESULT := 'SUKSES';
			COMMIT;
		ELSE
			P_RESULT := 'GAGAL';
			ROLLBACK;
		END IF;
	END IF;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		P_RESULT := 'NOT FOUND';
		ROLLBACK;
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_UPDATE_PROMO_AKUMULASI(
	P_KODE_PROMO IN T_PROMO.KODE_PROMO%TYPE,
	P_TITLE IN T_PROMO.TITLE%TYPE,
	P_SUBTITLE IN T_PROMO.SUBTITLE%TYPE,
	P_TANGGAL_MULAI IN T_PROMO.TANGGAL_MULAI%TYPE,
	P_TANGGAL_SELESAI IN T_PROMO.TANGGAL_SELESAI%TYPE,
	P_DESKRIPSI IN T_PROMO.DESKRIPSI%TYPE,
	P_CASHBACK IN T_PROMO.CASHBACK%TYPE,
	P_TARGET_AKUMULASI IN T_PROMO.TARGET_AKUMULASI%TYPE,
	P_LAST_UPDATE_BY IN T_PROMO.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)
IS
	V_DATE_BEGIN DATE;
	V_DATE_END DATE;
BEGIN
	SELECT TANGGAL_MULAI, TANGGAL_SELESAI INTO V_DATE_BEGIN, V_DATE_END FROM T_PROMO WHERE KODE_PROMO = P_KODE_PROMO;
	
	IF SYSDATE BETWEEN TRUNC(V_DATE_BEGIN) AND TRUNC(V_DATE_END) THEN
		P_RESULT := 'AKTIF PROMO';
	ELSIF TRUNC(SYSDATE) > TRUNC(V_DATE_END) THEN
		P_RESULT := 'PROMO ENDED';
	ELSIF TRUNC(SYSDATE) < TRUNC(V_DATE_BEGIN) THEN
		UPDATE T_PROMO SET TITLE = P_TITLE, SUBTITLE = P_SUBTITLE, TANGGAL_MULAI = P_TANGGAL_MULAI, TANGGAL_SELESAI = P_TANGGAL_SELESAI, DESKRIPSI = P_DESKRIPSI, CASHBACK = P_CASHBACK, TARGET_AKUMULASI = P_TARGET_AKUMULASI, LAST_UPDATE_BY = P_LAST_UPDATE_BY, LAST_UPDATE_DATE = SYSDATE WHERE KODE_PROMO = P_KODE_PROMO;
		
		IF SQL%ROWCOUNT = 1 THEN
			P_RESULT := 'SUKSES';
			COMMIT;
		ELSE
			P_RESULT := 'GAGAL';
			ROLLBACK;
		END IF;
	END IF;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		P_RESULT := 'NOT FOUND';
		ROLLBACK;
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
END;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_CLAIM_PROMO_AKUMULASI(
	P_BCA_ID IN T_NASABAH.BCA_ID%TYPE,
	P_KODE_PROMO IN T_PROMO.KODE_PROMO%TYPE,
	P_LAST_UPDATE_BY IN T_PROMO.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)IS
	V_BEGIN DATE;
	V_END DATE;
	
BEGIN
	SELECT TANGGAL_MULAI, TANGGAL_SELESAI INTO V_BEGIN, V_END FROM T_PROMO WHERE KODE_PROMO = P_KODE_PROMO;
	
	IF TRUNC(SYSDATE) BETWEEN V_BEGIN AND V_END THEN
		UPDATE T_NASABAH_PROMO SET USAGE_FLAG = 1 WHERE BCA_ID = P_BCA_ID AND AKUMULASI >= TARGET_AKUMULASI AND USAGE_FLAG = 0;
		
		IF SQL%ROWCOUNT = 1 THEN
			COMMIT;
			P_RESULT := 'SUKSES';
		ELSE
			ROLLBACK;
			P_RESULT := 'ALREADY CLAIMED';
        END IF;
	ELSE
		P_RESULT := 'EXPIRED';
	END IF;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		P_RESULT := 'NOT FOUND';
		ROLLBACK;
	WHEN TOO_MANY_ROWS THEN
		P_RESULT := 'GAGAL'; 
		ROLLBACK;
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
		ROLLBACK;
END;
/
SHOW ERR;

create or replace NONEDITIONABLE PROCEDURE SP_INSERT_JENIS_REKSADANA
(
P_NAMA IN m_jenis_reksadana.nama_jenis%TYPE,
P_UPDATED_BY IN m_jenis_reksadana.LAST_UPDATE_BY%TYPE,
P_STATUS OUT VARCHAR2
)
AS 
BEGIN
  INSERT INTO M_JENIS_REKSADANA VALUES (NULL,P_NAMA,SYSDATE,SYSDATE,P_UPDATED_BY);
  SELECT to_char(max(id_jenis_reksadana)) INTO P_STATUS FROM M_JENIS_REKSADANA WHERE nama_jenis = P_NAMA;
  
  FOR I IN (SELECT DISTINCT BOBOT_RESIKO, TINGKAT_RESIKO, LEVEL_RESIKO FROM M_RESIKO) LOOP
	INSERT INTO M_RESIKO(BOBOT_RESIKO, PERSENTASE, ID_JENIS_REKSADANA, CREATION_DATE, LAST_UPDATE_DATE, LAST_UPDATE_BY, TINGKAT_RESIKO, LEVEL_RESIKO) VALUES(I.BOBOT_RESIKO, 0, P_STATUS, SYSDATE, SYSDATE, P_UPDATED_BY, I.TINGKAT_RESIKO, I.LEVEL_RESIKO);
  END LOOP;
  COMMIT;
EXCEPTION WHEN OTHERS THEN
        P_STATUS:='SOMETHING WENT WRONG';
		ROLLBACK;
END SP_INSERT_JENIS_REKSADANA;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_INSERT_PRODUK_REKSADANA(
	P_NAMA_PRODUK IN T_PRODUK_REKSADANA.nama_produk%TYPE,
	P_ID_JENIS_REKSADANA IN T_PRODUK_REKSADANA.ID_JENIS_REKSADANA%TYPE,
	P_MINIMUM_UNIT IN T_PRODUK_REKSADANA.MINIMUM_UNIT%TYPE,
	P_EXPENSE_RATIO IN T_PRODUK_REKSADANA.EXPENSE_RATIO%TYPE,
	P_TOTAL_AUM IN T_PRODUK_REKSADANA.TOTAL_AUM%TYPE,
	P_MANAGER_INVESTASI IN T_PRODUK_REKSADANA.MANAGER_INVESTASI%TYPE,
	P_TINGKAT_RESIKO IN T_PRODUK_REKSADANA.TINGKAT_RESIKO%TYPE,
	P_LEVEL_RESIKO IN T_PRODUK_REKSADANA.LEVEL_RESIKO%TYPE,
	P_BANK_KUSTODIAN IN T_PRODUK_REKSADANA.BANK_KUSTODIAN%TYPE,
	P_BANK_PENAMPUNG IN T_PRODUK_REKSADANA.BANK_PENAMPUNG%TYPE,
	P_URL_VENDOR IN T_PRODUK_REKSADANA.URL_VENDOR%TYPE,
	P_PASSWORD_VENDOR IN T_PRODUK_REKSADANA.PASSWORD_VENDOR%TYPE,
	P_BIAYA_PEMBELIAN IN T_PRODUK_REKSADANA.BIAYA_PEMBELIAN%TYPE,
	P_LAST_UPDATE_BY IN T_PRODUK_REKSADANA.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)IS
BEGIN
	INSERT INTO T_PRODUK_REKSADANA(NAMA_PRODUK, ID_JENIS_REKSADANA, MINIMUM_UNIT, EXPENSE_RATIO,TOTAL_AUM, MANAGER_INVESTASI, TINGKAT_RESIKO, LEVEL_RESIKO, BANK_KUSTODIAN, BANK_PENAMPUNG, URL_VENDOR, PASSWORD_VENDOR, BIAYA_PEMBELIAN, LAST_UPDATE_DATE, CREATION_DATE, LAST_UPDATE_BY) VALUES(P_NAMA_PRODUK, P_ID_JENIS_REKSADANA, P_MINIMUM_UNIT, P_EXPENSE_RATIO, P_TOTAL_AUM, P_MANAGER_INVESTASI, P_TINGKAT_RESIKO, P_LEVEL_RESIKO, P_BANK_KUSTODIAN, P_BANK_PENAMPUNG, P_URL_VENDOR, P_PASSWORD_VENDOR, P_BIAYA_PEMBELIAN, SYSDATE, SYSDATE, P_LAST_UPDATE_BY);
	
	SELECT TO_CHAR(MAX(ID_PRODUK)) INTO P_RESULT FROM T_PRODUK_REKSADANA WHERE NAMA_PRODUK = P_NAMA_PRODUK;
	
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		P_RESULT:='GAGAL';
		ROLLBACK;
END;
/

create or replace NONEDITIONABLE PROCEDURE SP_UPDATE_JENIS_REKSADANA
(
P_ID IN m_jenis_reksadana.id_jenis_reksadana%TYPE,
P_NAMA IN m_jenis_reksadana.nama_jenis%TYPE,
P_UPDATED_BY IN m_jenis_reksadana.LAST_UPDATE_BY%TYPE,
P_STATUS OUT VARCHAR2
)
AS 
BEGIN
  UPDATE M_JENIS_REKSADANA SET NAMA_JENIS=P_NAMA ,LAST_UPDATE_DATE=SYSDATE,LAST_UPDATE_BY=P_UPDATED_BY WHERE ID_JENIS_REKSADANA=P_ID;
  IF SQL%ROWCOUNT = 1 THEN
   P_STATUS := '1';
   COMMIT;
  ELSE 
	P_STATUS := 'GAGAL';
	ROLLBACK;
	END IF;
  RETURN;
  EXCEPTION WHEN OTHERS THEN
        P_STATUS:='SOMETHING WENT WRONG';
  RETURN;
END SP_UPDATE_JENIS_REKSADANA;
/
SHOW ERR;

CREATE OR REPLACE PROCEDURE SP_UPDATE_PRODUK_REKSADANA(
	P_ID_PRODUK IN T_PRODUK_REKSADANA.ID_PRODUK%TYPE,
	P_NAMA_PRODUK IN T_PRODUK_REKSADANA.nama_produk%TYPE,
	P_ID_JENIS_REKSADANA IN T_PRODUK_REKSADANA.ID_JENIS_REKSADANA%TYPE,
	P_MINIMUM_UNIT IN T_PRODUK_REKSADANA.MINIMUM_UNIT%TYPE,
	P_EXPENSE_RATIO IN T_PRODUK_REKSADANA.EXPENSE_RATIO%TYPE,
	P_TOTAL_AUM IN T_PRODUK_REKSADANA.TOTAL_AUM%TYPE,
	P_MANAGER_INVESTASI IN T_PRODUK_REKSADANA.MANAGER_INVESTASI%TYPE,
	P_TINGKAT_RESIKO IN T_PRODUK_REKSADANA.TINGKAT_RESIKO%TYPE,
	P_LEVEL_RESIKO IN T_PRODUK_REKSADANA.LEVEL_RESIKO%TYPE,
	P_BANK_KUSTODIAN IN T_PRODUK_REKSADANA.BANK_KUSTODIAN%TYPE,
	P_BANK_PENAMPUNG IN T_PRODUK_REKSADANA.BANK_PENAMPUNG%TYPE,
	P_URL_VENDOR IN T_PRODUK_REKSADANA.URL_VENDOR%TYPE,
	P_PASSWORD_VENDOR IN T_PRODUK_REKSADANA.PASSWORD_VENDOR%TYPE,
	P_BIAYA_PEMBELIAN IN T_PRODUK_REKSADANA.BIAYA_PEMBELIAN%TYPE,
	P_LAST_UPDATE_BY IN T_PRODUK_REKSADANA.LAST_UPDATE_BY%TYPE,
	P_RESULT OUT VARCHAR2
)IS
BEGIN
	UPDATE T_PRODUK_REKSADANA SET NAMA_PRODUK = P_NAMA_PRODUK, ID_JENIS_REKSADANA = P_ID_JENIS_REKSADANA, MINIMUM_UNIT = P_MINIMUM_UNIT, EXPENSE_RATIO = P_EXPENSE_RATIO, TOTAL_AUM = P_TOTAL_AUM, MANAGER_INVESTASI = P_MANAGER_INVESTASI, TINGKAT_RESIKO = P_TINGKAT_RESIKO, LEVEL_RESIKO = P_LEVEL_RESIKO, BANK_KUSTODIAN = P_BANK_KUSTODIAN, BANK_PENAMPUNG = P_BANK_PENAMPUNG, URL_VENDOR = P_URL_VENDOR, PASSWORD_VENDOR = P_PASSWORD_VENDOR, BIAYA_PEMBELIAN = P_BIAYA_PEMBELIAN, LAST_UPDATE_DATE = SYSDATE, LAST_UPDATE_BY = P_LAST_UPDATE_BY WHERE ID_PRODUK = P_ID_PRODUK;
	
	IF SQL%ROWCOUNT = 1 THEN
	 P_RESULT := 'SUKSES';
	 COMMIT;
	ELSE
		P_RESULT := 'GAGAL';
		ROLLBACK;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
		P_RESULT:='GAGAL';
		ROLLBACK;
END;
/

CREATE OR REPLACE PROCEDURE GET_OVERVIEW_DATA(
	P_START_DATE IN DATE,
	P_END_DATE IN DATE,
	P_USER OUT NUMBER,
	P_NEW_USER OUT NUMBER,
	P_JUMLAH_INVESTASI OUT NUMBER,
	P_NEW_PLANNER OUT NUMBER,
	P_RESULT OUT VARCHAR2
)IS
BEGIN
	SELECT COUNT(BCA_ID) INTO P_USER FROM T_NASABAH WHERE TRUNC(TANGGAL_JOIN) <= P_END_DATE;
	
	SELECT COUNT(BCA_ID) INTO P_NEW_USER FROM T_NASABAH WHERE TRUNC(TANGGAL_JOIN) BETWEEN P_START_DATE AND P_END_DATE;
	
	SELECT SUM(TOTAL_BELI) INTO P_JUMLAH_INVESTASI FROM T_TRANSAKSI_BELI WHERE STATUS_PEMBELIAN <> 0 AND TRUNC(TANGGAL_ORDER_BELI) BETWEEN P_START_DATE AND P_END_DATE;
	
	SELECT COUNT(ID_PLAN) INTO P_NEW_PLANNER FROM T_PLANNER WHERE TRUNC(CREATION_DATE) BETWEEN P_START_DATE AND P_END_DATE;
	
	P_RESULT := 'SUKSES';
EXCEPTION
	WHEN OTHERS THEN
		P_RESULT := 'GAGAL';
END;